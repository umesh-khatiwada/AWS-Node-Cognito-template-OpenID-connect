<!DOCTYPE html>
<html>
<head>
    <title>Amazon Cognito authentication with Node example</title>
    <style>
        .video-container {
            margin: 20px 0;
            padding: 20px;
            background: #f8f9fa;
            border-radius: 8px;
        }
        .video-item {
            margin-bottom: 30px;
            padding: 15px;
            background: white;
            border-radius: 6px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .video-controls {
            margin: 10px 0;
        }
        .quality-selector {
            padding: 5px;
            margin-right: 10px;
        }
        .video-title {
            font-size: 18px;
            margin-bottom: 10px;
        }
    </style>
</head>
<body>
<div>
    <h1>Amazon Cognito User Pool Demo</h1>

    <% if (isAuthenticated) { %>
        <div>
            <h2>Welcome, <%= userInfo.username || userInfo.email %></h2>
        </div>
        <div style="margin: 20px 0;">
            <a href="/upload" style="display: inline-block; background-color: #0066cc; color: white; padding: 10px 20px; text-decoration: none; border-radius: 4px; margin-right: 10px;">Upload Files</a>
            <a href="/logout" style="display: inline-block; background-color: #dc3545; color: white; padding: 10px 20px; text-decoration: none; border-radius: 4px;">Logout</a>
        </div>

        <!-- Video List Section -->
        <div id="videoList" class="video-container">
            <h2>Your Videos</h2>
            <div id="videoItems"></div>
        </div>

        <script src="https://cdn.jsdelivr.net/npm/hls.js@latest"></script>
        <script>
            async function fetchVideos() {
                try {
                    const userId = '<%= userInfo.sub %>';
                    const response = await fetch(`/api/videos/${userId}`);
                    if (!response.ok) {
                        throw new Error('Failed to fetch videos');
                    }
                    const videos = await response.json();
                    displayVideos(videos);
                } catch (error) {
                    console.error('Error fetching videos:', error);
                    document.getElementById('videoItems').innerHTML = `
                        <div class="error-message" style="color: red; padding: 20px;">
                            Failed to load videos. Please try again later.
                        </div>`;
                }
            }

            function displayVideos(videos) {
                const container = document.getElementById('videoItems');
                container.innerHTML = videos.map((video, index) => `
                    <div class="video-item">
                        <div class="video-title">${video.fileName}</div>
                        <div class="video-controls">
                            <select id="quality-${index}" class="quality-selector" onchange="changeQuality(${index})">
                                <option value="auto">Auto</option>
                                <option value="720p">720p</option>
                                <option value="360p">360p</option>
                            </select>
                            <span id="current-quality-${index}">Current Quality: Auto</span>
                        </div>
                        <video id="video-${index}" controls style="width: 100%; max-width: 800px;"></video>
                    </div>
                `).join('');

                videos.forEach((video, index) => {
                    initializeVideo(video.playbackUrls[0], index);
                });
            }

            function initializeVideo(playbackUrl, index) {
                const video = document.getElementById(`video-${index}`);
                if (Hls.isSupported()) {
                    const hls = new Hls({
                        startLevel: -1,
                        capLevelToPlayerSize: true
                    });

                    hls.loadSource(playbackUrl);
                    hls.attachMedia(video);

                    hls.on(Hls.Events.LEVEL_SWITCHED, (event, data) => {
                        const currentLevel = hls.levels[data.level];
                        if (currentLevel) {
                            const quality = currentLevel.height + 'p';
                            document.getElementById(`current-quality-${index}`).textContent = 
                                `Current Quality: ${hls.autoLevelEnabled ? 'Auto (' + quality + ')' : quality}`;
                        }
                    });

                    // Store hls instance for quality changes
                    video.hlsInstance = hls;
                } else if (video.canPlayType('application/vnd.apple.mpegurl')) {
                    video.src = playbackUrl;
                    // Hide quality controls for native HLS support
                    document.getElementById(`quality-${index}`).style.display = 'none';
                    document.getElementById(`current-quality-${index}`).style.display = 'none';
                }
            }

            function changeQuality(index) {
                const video = document.getElementById(`video-${index}`);
                const quality = document.getElementById(`quality-${index}`).value;
                const hls = video.hlsInstance;

                if (hls) {
                    if (quality === 'auto') {
                        hls.currentLevel = -1;
                    } else {
                        const level = hls.levels.findIndex(level => 
                            level.height === parseInt(quality));
                        if (level !== -1) {
                            hls.currentLevel = level;
                        }
                    }
                }
            }

            // Fetch videos when page loads
            document.addEventListener('DOMContentLoaded', fetchVideos);
        </script>
    <% } else { %>
        <p>Please log in to continue</p>
        <a href="/login">Login</a>
    <% } %>
</div>
</body>
</html>
