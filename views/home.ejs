<!DOCTYPE html>
<html>
<head>
    <title>Amazon Cognito authentication with Node example</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f0f2f5;
            min-height: 100vh;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        .header {
            background: white;
            padding: 20px 30px;
            border-radius: 12px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            margin-bottom: 24px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .welcome-text {
            color: #1a73e8;
            margin: 0;
            font-size: 24px;
            font-weight: 500;
        }
        .button-group {
            display: flex;
            gap: 12px;
            margin: 20px 0;
        }
        .btn {
            display: inline-flex;
            align-items: center;
            padding: 12px 24px;
            border-radius: 8px;
            text-decoration: none;
            font-weight: 500;
            transition: all 0.2s;
            border: none;
        }
        .btn-primary {
            background-color: #1a73e8;
            color: white;
        }
        .btn-danger {
            background-color: #dc3545;
            color: white;
        }
        .btn:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }
        .video-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
            gap: 24px;
            padding: 20px 0;
        }
        .video-item {
            background: white;
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            transition: transform 0.2s;
        }
        .video-item:hover {
            transform: translateY(-4px);
            box-shadow: 0 6px 12px rgba(0,0,0,0.1);
        }
        .video-thumbnail {
            width: 100%;
            aspect-ratio: 16/9;
            object-fit: cover;
            background: #f0f0f0;
            transition: opacity 0.3s ease;
        }
        .thumbnail-loading {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            color: #666;
            font-size: 14px;
            pointer-events: none;
        }
        .thumbnail-container {
            position: relative;
            overflow: hidden;
            background: #f8f9fa;
        }
        .thumbnail-error {
            display: flex;
            align-items: center;
            justify-content: center;
            width: 100%;
            aspect-ratio: 16/9;
            background: #e9ecef;
            color: #6c757d;
            font-size: 14px;
        }
        .video-content {
            padding: 16px;
        }
        .video-title {
            font-size: 16px;
            font-weight: 500;
            color: #1a73e8;
            margin-bottom: 12px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }
        .video-status {
            display: inline-block;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 12px;
            font-weight: 500;
            margin-bottom: 12px;
        }
        .status-submitted {
            background-color: #e0f2fe;
            color: #0369a1;
        }
        .status-processing {
            background-color: #fef3c7;
            color: #d97706;
        }
        .status-completed {
            background-color: #d1fae5;
            color: #047857;
        }
        .play-button {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: rgba(0,0,0,0.7);
            border: none;
            border-radius: 50%;
            width: 60px;
            height: 60px;
            cursor: pointer;
            transition: all 0.2s;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .play-button:hover {
            background: rgba(0,0,0,0.9);
            transform: translate(-50%, -50%) scale(1.1);
        }
        .play-icon {
            width: 0;
            height: 0;
            border-left: 20px solid white;
            border-top: 12px solid transparent;
            border-bottom: 12px solid transparent;
            margin-left: 4px;
        }
        .video-player {
            width: 100%;
            aspect-ratio: 16/9;
            background: #000;
        }
        .video-modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.9);
            z-index: 1000;
            justify-content: center;
            align-items: center;
        }
        .modal-content {
            background: white;
            border-radius: 8px;
            padding: 20px;
            max-width: 90vw;
            max-height: 90vh;
            position: relative;
        }
        .close-modal {
            position: absolute;
            top: 10px;
            right: 15px;
            background: none;
            border: none;
            font-size: 24px;
            cursor: pointer;
            color: #666;
        }
        .close-modal:hover {
            color: #000;
        }
        .error-message {
            background: #fee2e2;
            color: #dc2626;
            padding: 16px;
            border-radius: 8px;
            margin: 20px 0;
        }
        .no-videos {
            text-align: center;
            padding: 40px;
            color: #666;
            background: white;
            border-radius: 12px;
            font-size: 16px;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1 class="welcome-text">
                <% if (isAuthenticated) { %>
                    Welcome back, <%= userInfo.email || userInfo.username %>
                <% } else { %>
                    Video Management Platform
                <% } %>
            </h1>
            <% if (isAuthenticated) { %>
                <div class="button-group">
                    <a href="/upload" class="btn btn-primary">Upload New Video</a>
                    <a href="/logout" class="btn btn-danger">Sign Out</a>
                </div>
            <% } %>
        </div>

        <% if (isAuthenticated) { %>
            <div id="videoList">
                <h2 class="section-title">Your Videos</h2>
                <div id="videoItems" class="video-grid"></div>
            </div>

            <script src="https://cdn.jsdelivr.net/npm/hls.js@latest"></script>
            <script>
                async function fetchVideos() {
                    try {
                        const userId = '<%= userInfo.sub %>';
                        const response = await fetch(`/api/videos/${userId}`);
                        if (!response.ok) {
                            throw new Error('Failed to fetch videos');
                        }
                        const videos = await response.json();
                        displayVideos(videos);
                    } catch (error) {
                        console.error('Error fetching videos:', error);
                        document.getElementById('videoItems').innerHTML = `
                            <div class="error-message">
                                Failed to load videos. Please try again later.
                            </div>`;
                    }
                }

                function displayVideos(videos) {
                    const container = document.getElementById('videoItems');
                    if (!videos || videos.length === 0) {
                        container.innerHTML = '<div class="no-videos">No videos available.</div>';
                        return;
                    }

                    container.innerHTML = videos.map((video, index) => {
                        const hasPlayback = video.playbackUrls && video.playbackUrls.length > 0;
                        const thumbnailUrl = video.thumbnail || '';
                        
                        return `
                            <div class="video-item">
                                <div class="thumbnail-container">
                                    ${thumbnailUrl ? 
                                        `<img src="${thumbnailUrl}" 
                                             alt="${video.fileName}" 
                                             class="video-thumbnail"
                                             onload="this.style.opacity='1'; this.nextElementSibling.style.display='none';"
                                             onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">
                                         <div class="thumbnail-error" style="display: none;">
                                             <span>ðŸ“¹ Thumbnail not available</span>
                                         </div>` :
                                        `<div class="thumbnail-error">
                                             <span>ðŸ“¹ Processing thumbnail...</span>
                                         </div>`
                                    }
                                    ${hasPlayback ? 
                                        `<button class="play-button" onclick="playVideo(${index}, '${video.playbackUrls[0]}')">
                                            <div class="play-icon"></div>
                                        </button>` : ''
                                    }
                                </div>
                                <div class="video-content">
                                    <div class="video-status status-${video.status}">${video.status}</div>
                                    <div class="video-title" title="${video.fileName}">${video.fileName}</div>
                                    <div class="video-details" style="font-size: 12px; color: #666; margin-bottom: 8px;">
                                        Uploaded: ${new Date(video.uploadedAt).toLocaleDateString()}
                                    </div>
                                    <div class="video-controls">
                                        ${hasPlayback ? 
                                            `<select id="quality-${index}" class="quality-selector" onchange="changeQuality(${index})">
                                                <option value="auto">Auto</option>
                                                <option value="720p">720p</option>
                                                <option value="540p">540p</option>
                                                <option value="360p">360p</option>
                                            </select>
                                            <span id="current-quality-${index}" class="quality-info">Ready to play</span>` :
                                            '<span class="quality-info">Video processing...</span>'
                                        }
                                    </div>
                                </div>
                            </div>
                        `;
                    }).join('');

                    // Create modal for video playback
                    if (!document.getElementById('videoModal')) {
                        const modal = document.createElement('div');
                        modal.id = 'videoModal';
                        modal.className = 'video-modal';
                        modal.innerHTML = `
                            <div class="modal-content">
                                <button class="close-modal" onclick="closeVideoModal()">&times;</button>
                                <video id="modalVideo" class="video-player" controls></video>
                                <div class="video-controls">
                                    <select id="modalQuality" class="quality-selector" onchange="changeModalQuality()">
                                        <option value="auto">Auto</option>
                                        <option value="720p">720p</option>
                                        <option value="540p">540p</option>
                                        <option value="360p">360p</option>
                                    </select>
                                    <span id="modalCurrentQuality" class="quality-info">Current Quality: Auto</span>
                                </div>
                            </div>
                        `;
                        document.body.appendChild(modal);
                    }
                }

                function playVideo(index, playbackUrl) {
                    console.log('Playing video with URL:', playbackUrl);
                    const modal = document.getElementById('videoModal');
                    const video = document.getElementById('modalVideo');
                    
                    modal.style.display = 'flex';
                    
                    if (Hls.isSupported()) {
                        if (video.hlsInstance) {
                            video.hlsInstance.destroy();
                        }
                        
                        const hls = new Hls({
                            startLevel: -1,
                            capLevelToPlayerSize: true,
                            debug: false
                        });

                        hls.loadSource(playbackUrl);
                        hls.attachMedia(video);

                        hls.on(Hls.Events.MANIFEST_PARSED, () => {
                            console.log('HLS manifest loaded');
                        });

                        hls.on(Hls.Events.LEVEL_SWITCHED, (event, data) => {
                            const currentLevel = hls.levels[data.level];
                            if (currentLevel) {
                                const quality = currentLevel.height + 'p';
                                document.getElementById('modalCurrentQuality').textContent = 
                                    `Current Quality: ${hls.autoLevelEnabled ? 'Auto (' + quality + ')' : quality}`;
                            }
                        });

                        hls.on(Hls.Events.ERROR, (event, data) => {
                            console.error('HLS error:', data);
                        });

                        video.hlsInstance = hls;
                    } else if (video.canPlayType('application/vnd.apple.mpegurl')) {
                        video.src = playbackUrl;
                        document.getElementById('modalQuality').style.display = 'none';
                        document.getElementById('modalCurrentQuality').style.display = 'none';
                    }
                }

                function closeVideoModal() {
                    const modal = document.getElementById('videoModal');
                    const video = document.getElementById('modalVideo');
                    
                    modal.style.display = 'none';
                    video.pause();
                    
                    if (video.hlsInstance) {
                        video.hlsInstance.destroy();
                        video.hlsInstance = null;
                    }
                }

                function changeModalQuality() {
                    const video = document.getElementById('modalVideo');
                    const quality = document.getElementById('modalQuality').value;
                    const hls = video.hlsInstance;

                    if (hls) {
                        if (quality === 'auto') {
                            hls.currentLevel = -1;
                        } else {
                            const level = hls.levels.findIndex(level => 
                                level.height === parseInt(quality));
                            if (level !== -1) {
                                hls.currentLevel = level;
                            }
                        }
                    }
                }

                function initializeVideo(playbackUrl, index) {
                    // This function is now handled by the modal
                }

                function changeQuality(index) {
                    // Individual video quality changes are now handled in modal
                }

                // Close modal when clicking outside
                document.addEventListener('click', function(event) {
                    const modal = document.getElementById('videoModal');
                    if (event.target === modal) {
                        closeVideoModal();
                    }
                });

                // Fetch videos when page loads
                document.addEventListener('DOMContentLoaded', fetchVideos);
            </script>
        <% } else { %>
            <div class="login-prompt">
                <h2>Welcome to Video Management Platform</h2>
                <p style="color: #666; margin: 20px 0;">Please sign in to manage and view your videos</p>
                <a href="/login" class="btn btn-primary">Sign In</a>
            </div>
        <% } %>
    </div>
</body>
</html>