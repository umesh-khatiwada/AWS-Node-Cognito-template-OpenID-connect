<!DOCTYPE html>
<html>
<head>
    <title>VideoHub Player - <%= videoTitle || 'Video Player' %></title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    
    <!-- Video.js CSS -->
    <link href="https://vjs.zencdn.net/8.6.1/video-js.css" rel="stylesheet">
    <link rel="stylesheet" href="/css/video-player.css">
    

</head>
<body>
    <!-- YouTube-style Header -->
    <header class="youtube-header">
        <div class="header-left">
            <button class="back-btn" onclick="goBack()">‚Üê</button>
            <div class="logo">
                üé¨ VideoHub
            </div>
        </div>
        
        <div class="header-center">
            <div class="video-title" id="headerTitle">
                <%= videoTitle || 'Loading...' %>
            </div>
        </div>
        
        <div class="header-right">
            <button class="header-btn" onclick="toggleTheater()" title="Theater mode">‚õ∂</button>
            <button class="header-btn" onclick="toggleFullscreen()" title="Fullscreen">‚õ∂</button>
        </div>
    </header>

    <!-- Main Player Container -->
    <div class="player-container">
        <div class="video-wrapper" id="videoWrapper">
            <!-- Loading Spinner -->
            <div class="loading-spinner" id="loadingSpinner"></div>
            
            <!-- Video Player -->
            <video
                id="youtube-player"
                class="video-js vjs-default-skin video-player"
                controls
                preload="auto"
                data-setup='{}'
                controlsList="nodownload nofullscreen noremoteplayback"
                >
                <source src="<%= videoUrl %>" type="application/x-mpegURL" data-quality="auto">
                <p class="vjs-no-js">
                    To view this video please enable JavaScript, and consider upgrading to a web browser that
                    <a href="https://videojs.com/html5-video-support/" target="_blank">supports HTML5 video</a>.
                </p>
            </video>

            <!-- Error Overlay -->
            <div class="error-overlay" id="errorOverlay">
                <div class="error-icon">‚ö†Ô∏è</div>
                <div class="error-title">An error occurred</div>
                <div class="error-message" id="errorMessage">
                    Something went wrong while trying to play this video.
                </div>
                <button class="retry-button" onclick="retryPlayback()">Retry</button>
            </div>

            <!-- Settings Menu -->
            <div class="settings-menu" id="settingsMenu" style="position:relative;z-index:10;">
                <div class="settings-item" id="qualitySettingsItem" tabindex="0">
                    <span class="settings-label">Quality</span>
                    <span class="settings-value" id="currentQuality">Auto</span>
                    <span style="margin-left:8px;">‚ñº</span>
                </div>
                <div class="settings-item" onclick="togglePlaybackSpeed()">
                    <span class="settings-label">Speed</span>
                    <span class="settings-value" id="currentSpeed">Normal</span>
                </div>
            </div>

            <!-- Quality Menu -->
            <div class="quality-menu" id="qualityMenu" style="display:none;position:absolute;top:40px;right:20px;z-index:20;background:#222;padding:10px 0;border-radius:8px;box-shadow:0 2px 8px rgba(0,0,0,0.3);min-width:120px;">
                <!-- Quality options will be injected dynamically -->
            </div>
        </div>

        <!-- Video Info -->
        <div class="video-info">
            <h1 class="video-title-main" id="videoTitleMain">
                <%= videoTitle || 'Loading...' %>
            </h1>
            
            <div class="video-meta">
                <span id="viewCount">Loading...</span>
                <span>‚Ä¢</span>
                <span id="uploadDate">Loading...</span>
            </div>
            
            <div class="video-actions">
                <button class="action-button" onclick="toggleLike()">
                    <span>üëç</span>
                    <span>Like</span>
                </button>
                <button class="action-button" onclick="toggleDislike()">
                    <span>üëé</span>
                    <span>Dislike</span>
                </button>
                <button class="action-button" onclick="shareVideo()">
                    <span>üì§</span>
                    <span>Share</span>
                </button>
                <button class="action-button" onclick="downloadVideo()">
                    <span>üíæ</span>
                    <span>Save</span>
                </button>
                <button class="action-button" onclick="reportVideo()">
                    <span>üö©</span>
                    <span>Report</span>
                </button>
            </div>
        </div>
    </div>

    <!-- Scripts -->
    <script src="https://vjs.zencdn.net/8.6.1/video.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/hls.js@1.4.14/dist/hls.min.js"></script>
    <script>
        let hls;
        const video = document.getElementById('youtube-player');
        const qualityMenu = document.getElementById('qualityMenu');
        const currentQualityLabel = document.getElementById('currentQuality');
        const qualitySettingsItem = document.getElementById('qualitySettingsItem');

        // Dynamically populate quality menu based on HLS levels
        function populateQualityMenu(levels) {
            let html = `<div class="quality-item active" data-quality="auto">Auto</div>`;
            // Sort by height descending (highest first)
            const sorted = levels.slice().sort((a, b) => b.height - a.height);
            const seen = new Set();
            sorted.forEach(level => {
                if (!seen.has(level.height) && level.height > 0) {
                    html += `<div class="quality-item" data-quality="${level.height}">${level.height}p</div>`;
                    seen.add(level.height);
                }
            });
            qualityMenu.innerHTML = html;
            activateQualityMenu();
        }

        function setHlsQuality(quality) {
            if (!hls) return;
            if (quality === 'auto') {
                hls.currentLevel = -1;
                currentQualityLabel.textContent = 'AUTO';
            } else {
                // Find the level index for the selected height
                const idx = hls.levels.findIndex(l => l.height == quality);
                if (idx !== -1) {
                    hls.currentLevel = idx;
                    currentQualityLabel.textContent = `${quality}P`;
                }
            }
        }

        function activateQualityMenu() {
            const items = qualityMenu.querySelectorAll('.quality-item');
            items.forEach(item => {
                item.onclick = function() {
                    items.forEach(i => i.classList.remove('active'));
                    this.classList.add('active');
                    setHlsQuality(this.getAttribute('data-quality'));
                    qualityMenu.style.display = 'none';
                };
            });
        }

        function toggleQualityMenu() {
            qualityMenu.style.display = (qualityMenu.style.display === 'block') ? 'none' : 'block';
        }

        // Show menu on click or keyboard
        qualitySettingsItem.addEventListener('click', toggleQualityMenu);
        qualitySettingsItem.addEventListener('keydown', function(e) {
            if (e.key === 'Enter' || e.key === ' ') {
                e.preventDefault();
                toggleQualityMenu();
            }
        });

        // Hide quality menu when clicking outside
        document.addEventListener('click', function(e) {
            const settings = document.getElementById('settingsMenu');
            if (qualityMenu && qualityMenu.style.display === 'block' && !settings.contains(e.target) && !qualityMenu.contains(e.target)) {
                qualityMenu.style.display = 'none';
            }
        });

        function initHlsPlayer() {
            if (Hls.isSupported()) {
                hls = new Hls();
                hls.loadSource("<%= videoUrl %>");
                hls.attachMedia(video);

                hls.on(Hls.Events.MANIFEST_PARSED, function (_, data) {
                    populateQualityMenu(hls.levels);
                    setHlsQuality('auto');
                });

                hls.on(Hls.Events.LEVEL_SWITCHED, function(event, data) {
                    // Optionally update UI here
                });
            } else if (video.canPlayType('application/vnd.apple.mpegurl')) {
                video.src = "<%= videoUrl %>";
                currentQualityLabel.textContent = 'AUTO';
                // Native HLS (Safari): quality switching not supported
                qualityMenu.innerHTML = `<div class="quality-item active" data-quality="auto">Auto</div>`;
            } else {
                alert('HLS is not supported in this browser.');
            }
        }

        document.addEventListener('DOMContentLoaded', initHlsPlayer);

        // Add goBack function to navigate to home page
        function goBack() {
            window.location.href = '/';
        }
    </script>
    <!-- ...existing code... -->
</body>
</html>
