<!DOCTYPE html>
<html>
<head>
    <title>VideoHub Player - <%= videoTitle || 'Video Player' %></title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    
    <!-- Video.js CSS -->
    <link href="https://vjs.zencdn.net/8.6.1/video-js.css" rel="stylesheet">
    <link rel="stylesheet" href="/css/video-player.css">
    
    <style>
        body {
            margin: 0;
            padding: 0;
            background: #000;
            color: white;
            font-family: 'Netflix Sans', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            overflow: hidden;
        }

        .player-container {
            position: relative;
            width: 100vw;
            height: 100vh;
            background: #000;
        }

        .player-header {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            z-index: 1000;
            background: linear-gradient(180deg, rgba(0,0,0,0.8) 0%, transparent 100%);
            padding: 20px 30px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            transition: opacity 0.3s ease;
        }

        .player-header.hidden {
            opacity: 0;
            pointer-events: none;
        }

        .back-button {
            display: flex;
            align-items: center;
            gap: 10px;
            background: rgba(255,255,255,0.1);
            border: 1px solid rgba(255,255,255,0.2);
            color: white;
            padding: 10px 20px;
            border-radius: 8px;
            text-decoration: none;
            font-weight: 500;
            transition: all 0.3s ease;
            backdrop-filter: blur(10px);
        }

        .back-button:hover {
            background: rgba(255,255,255,0.2);
            transform: translateY(-1px);
        }

        .video-title-header {
            flex: 1;
            text-align: center;
            font-size: 1.2rem;
            font-weight: 600;
            margin: 0 20px;
            opacity: 0.9;
        }

        .player-actions {
            display: flex;
            gap: 15px;
            align-items: center;
        }

        .action-button {
            background: rgba(255,255,255,0.1);
            border: 1px solid rgba(255,255,255,0.2);
            color: white;
            padding: 8px 12px;
            border-radius: 6px;
            cursor: pointer;
            transition: all 0.3s ease;
            backdrop-filter: blur(10px);
        }

        .action-button:hover {
            background: rgba(255,255,255,0.2);
        }

        /* Video.js Netflix Theme */
        .video-js {
            width: 100%;
            height: 100%;
            font-family: 'Netflix Sans', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background-color: #000;
        }

        .video-js .vjs-big-play-button {
            font-size: 2em;
            line-height: 2;
            height: 2em;
            width: 2em;
            border-radius: 50%;
            background-color: rgba(229, 9, 20, 0.9);
            border: 2px solid white;
            top: 50%;
            left: 50%;
            margin-top: -1em;
            margin-left: -1em;
            transition: all 0.3s ease;
        }

        .video-js .vjs-big-play-button:hover {
            background-color: #e50914;
            transform: scale(1.1);
        }

        .video-js .vjs-control-bar {
            background: linear-gradient(180deg, transparent 0%, rgba(0,0,0,0.8) 100%);
            height: 4em;
            padding: 0 1em;
        }

        /* Mobile responsiveness */
        @media (max-width: 768px) {
            .player-header {
                padding: 15px 20px;
            }

            .video-title-header {
                font-size: 1rem;
            }

            .back-button {
                padding: 8px 16px;
                font-size: 0.9rem;
            }
        }
    </style>
</head>
<body>
    <div class="player-container">
        <!-- Header -->
        <div class="player-header" id="playerHeader">
            <a href="/" class="back-button">
                <span>←</span>
                <span>Back to Library</span>
            </a>
            
            <h1 class="video-title-header" id="videoTitleDisplay">
                <%= videoTitle || 'Loading...' %>
            </h1>
            
            <div class="player-actions">
                <button class="action-button" onclick="toggleFullscreen()" title="Fullscreen">
                    ⛶
                </button>
            </div>
        </div>

        <!-- Video.js Player -->
        <video
            id="netflix-player"
            class="video-js vjs-default-skin"
            controls
            preload="auto"
            data-setup='{}'>
            <p class="vjs-no-js">
                To view this video please enable JavaScript, and consider upgrading to a web browser that
                <a href="https://videojs.com/html5-video-support/" target="_blank">supports HTML5 video</a>.
            </p>
        </video>
    </div>

    <!-- Video.js JavaScript -->
    <script src="https://vjs.zencdn.net/8.6.1/video.min.js"></script>
    
    <script>
        class NetflixVideoPlayer {
            constructor() {
                this.player = null;
                this.playerHeader = document.getElementById('playerHeader');
                this.hideHeaderTimeout = null;
                
                this.init();
            }

            init() {
                this.loadVideoFromURL();
            }

            loadVideoFromURL() {
                const urlParams = new URLSearchParams(window.location.search);
                const videoUrl = urlParams.get('url');
                const videoTitle = urlParams.get('title');

                console.log('Loading video:', { videoUrl, videoTitle });

                if (videoTitle) {
                    document.getElementById('videoTitleDisplay').textContent = videoTitle;
                    document.title = `VideoHub Player - ${videoTitle}`;
                }

                if (!videoUrl) {
                    this.showError('No video URL provided');
                    return;
                }

                // Decode the URL in case it's double-encoded
                const decodedUrl = decodeURIComponent(videoUrl);
                console.log('Decoded video URL:', decodedUrl);

                this.initializePlayer(decodedUrl);
            }

            initializePlayer(videoUrl) {
                try {
                    console.log('Initializing player with URL:', videoUrl);
                    
                    // Initialize Video.js player with better error handling
                    this.player = videojs('netflix-player', {
                        fluid: false,
                        responsive: false,
                        fill: true,
                        playbackRates: [0.5, 0.75, 1, 1.25, 1.5, 2],
                        controls: true,
                        preload: 'auto',
                        autoplay: false,
                        html5: {
                            hls: {
                                enableLowInitialPlaylist: true,
                                smoothQualityChange: true,
                                overrideNative: true
                            },
                            vhs: {
                                overrideNative: true,
                                enableLowInitialPlaylist: true,
                                smoothQualityChange: true
                            }
                        },
                        sources: [{
                            src: videoUrl,
                            type: this.getVideoType(videoUrl)
                        }],
                        techOrder: ['html5']
                    });

                    this.setupPlayerEvents();
                    this.setupKeyboardShortcuts();
                    this.setupMouseEvents();
                    
                } catch (error) {
                    console.error('Error initializing player:', error);
                    this.showError('Failed to initialize video player: ' + error.message);
                }
            }

            getVideoType(url) {
                if (url.includes('.m3u8')) {
                    return 'application/x-mpegURL';
                } else if (url.includes('.mp4')) {
                    return 'video/mp4';
                } else if (url.includes('.webm')) {
                    return 'video/webm';
                } else if (url.includes('.mov')) {
                    return 'video/quicktime';
                } else {
                    return 'application/x-mpegURL'; // Default to HLS
                }
            }

            setupPlayerEvents() {
                this.player.ready(() => {
                    console.log('Player is ready');
                    this.hideHeaderDelayed();
                    
                    // Try to load the video
                    this.player.load();
                });

                this.player.on('loadstart', () => {
                    console.log('Video loading started');
                });

                this.player.on('loadedmetadata', () => {
                    console.log('Video metadata loaded');
                    console.log('Duration:', this.player.duration());
                });

                this.player.on('canplay', () => {
                    console.log('Video can start playing');
                });

                this.player.on('play', () => {
                    console.log('Video started playing');
                    this.hideHeaderDelayed();
                });

                this.player.on('pause', () => {
                    console.log('Video paused');
                    this.showHeader();
                });

                this.player.on('ended', () => {
                    console.log('Video ended');
                    this.showHeader();
                });

                this.player.on('error', (event) => {
                    const error = this.player.error();
                    console.error('Player error event:', event);
                    console.error('Player error details:', error);
                    
                    let errorMessage = 'Failed to load video.';
                    if (error) {
                        switch (error.code) {
                            case 1:
                                errorMessage = 'Video loading was aborted.';
                                break;
                            case 2:
                                errorMessage = 'Network error occurred while loading video.';
                                break;
                            case 3:
                                errorMessage = 'Video decoding error.';
                                break;
                            case 4:
                                errorMessage = 'Video format not supported.';
                                break;
                            default:
                                errorMessage = `Video error (${error.code}): ${error.message || 'Unknown error'}`;
                        }
                    }
                    
                    this.showError(errorMessage);
                });

                this.player.on('waiting', () => {
                    console.log('Video is buffering');
                });

                this.player.on('playing', () => {
                    console.log('Video is playing after buffering');
                });

                // Add additional debugging for HLS
                this.player.ready(() => {
                    if (this.player.tech_ && this.player.tech_.hls) {
                        console.log('HLS tech available');
                        this.player.tech_.hls.on('hlsError', (event, data) => {
                            console.error('HLS Error:', data);
                        });
                    }
                });
            }

            setupKeyboardShortcuts() {
                document.addEventListener('keydown', (e) => {
                    if (!this.player) return;

                    switch (e.code) {
                        case 'Space':
                            e.preventDefault();
                            if (this.player.paused()) {
                                this.player.play().catch(err => console.error('Play failed:', err));
                            } else {
                                this.player.pause();
                            }
                            break;
                        case 'ArrowLeft':
                            e.preventDefault();
                            this.player.currentTime(Math.max(0, this.player.currentTime() - 10));
                            this.showSkipIndicator('-10s');
                            break;
                        case 'ArrowRight':
                            e.preventDefault();
                            this.player.currentTime(Math.min(this.player.duration(), this.player.currentTime() + 10));
                            this.showSkipIndicator('+10s');
                            break;
                        case 'KeyF':
                            e.preventDefault();
                            if (this.player.isFullscreen()) {
                                this.player.exitFullscreen();
                            } else {
                                this.player.requestFullscreen();
                            }
                            break;
                        case 'KeyM':
                            e.preventDefault();
                            this.player.muted(!this.player.muted());
                            break;
                    }
                    this.showHeader();
                });
            }

            setupMouseEvents() {
                document.addEventListener('mousemove', () => this.showHeader());
                document.addEventListener('touchstart', () => this.showHeader());
                
                // Click on player to toggle play/pause
                this.player.on('click', () => {
                    if (this.player.paused()) {
                        this.player.play().catch(err => console.error('Play failed:', err));
                    } else {
                        this.player.pause();
                    }
                });
            }

            showHeader() {
                this.playerHeader.classList.remove('hidden');
                clearTimeout(this.hideHeaderTimeout);
                this.hideHeaderDelayed();
            }

            hideHeaderDelayed() {
                clearTimeout(this.hideHeaderTimeout);
                this.hideHeaderTimeout = setTimeout(() => {
                    if (this.player && !this.player.paused() && !this.player.ended()) {
                        this.playerHeader.classList.add('hidden');
                    }
                }, 3000);
            }

            showSkipIndicator(text) {
                const indicator = document.createElement('div');
                indicator.textContent = text;
                indicator.style.cssText = `
                    position: absolute;
                    top: 50%;
                    left: 50%;
                    transform: translate(-50%, -50%);
                    background: rgba(0,0,0,0.8);
                    color: white;
                    padding: 10px 20px;
                    border-radius: 4px;
                    font-size: 1.2rem;
                    font-weight: bold;
                    z-index: 1001;
                    pointer-events: none;
                    animation: fadeInOut 1s ease-in-out;
                `;
                
                document.body.appendChild(indicator);
                
                setTimeout(() => {
                    if (indicator.parentNode) {
                        indicator.parentNode.removeChild(indicator);
                    }
                }, 1000);
            }

            showError(message) {
                console.error('Showing error:', message);
                
                // Create error overlay
                const errorOverlay = document.createElement('div');
                errorOverlay.style.cssText = `
                    position: absolute;
                    top: 0;
                    left: 0;
                    width: 100%;
                    height: 100%;
                    background: rgba(0,0,0,0.9);
                    display: flex;
                    flex-direction: column;
                    align-items: center;
                    justify-content: center;
                    z-index: 2000;
                    color: white;
                    text-align: center;
                    padding: 20px;
                `;
                
                errorOverlay.innerHTML = `
                    <div style="font-size: 3rem; margin-bottom: 20px; color: #e50914;">⚠️</div>
                    <h2 style="margin-bottom: 20px; font-size: 1.5rem;">Video Player Error</h2>
                    <p style="margin-bottom: 30px; font-size: 1.1rem; max-width: 600px; line-height: 1.5;">${message}</p>
                    <button onclick="window.history.back()" style="
                        background: #e50914;
                        color: white;
                        border: none;
                        padding: 12px 24px;
                        border-radius: 6px;
                        font-size: 1rem;
                        cursor: pointer;
                        transition: background 0.3s ease;
                    " onmouseover="this.style.background='#f40612'" onmouseout="this.style.background='#e50914'">
                        ← Go Back
                    </button>
                `;
                
                document.body.appendChild(errorOverlay);
            }

            destroy() {
                if (this.player) {
                    this.player.dispose();
                }
            }
        }

        function toggleFullscreen() {
            if (window.netflixPlayer && window.netflixPlayer.player) {
                if (window.netflixPlayer.player.isFullscreen()) {
                    window.netflixPlayer.player.exitFullscreen();
                } else {
                    window.netflixPlayer.player.requestFullscreen();
                }
            }
        }

        // Add fade animation for skip indicator
        const style = document.createElement('style');
        style.textContent = `
            @keyframes fadeInOut {
                0% { opacity: 0; transform: translate(-50%, -50%) scale(0.8); }
                20% { opacity: 1; transform: translate(-50%, -50%) scale(1); }
                80% { opacity: 1; transform: translate(-50%, -50%) scale(1); }
                100% { opacity: 0; transform: translate(-50%, -50%) scale(1.1); }
            }
        `;
        document.head.appendChild(style);

        // Initialize player when page loads
        document.addEventListener('DOMContentLoaded', () => {
            console.log('DOM loaded, initializing player...');
            window.netflixPlayer = new NetflixVideoPlayer();
        });

        // Cleanup on page unload
        window.addEventListener('beforeunload', () => {
            if (window.netflixPlayer) {
                window.netflixPlayer.destroy();
            }
        });
    </script>
</body>
</html>
